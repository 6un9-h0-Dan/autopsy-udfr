/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.juitxp.autopsy;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;

import javax.swing.JFileChooser;
import java.nio.file.Path;
import java.io.File;

import org.sleuthkit.autopsy.corecomponentinterfaces.DataSourceProcessor;

/**
 *
 * @author florian
 */
public class UFEDDataSourceProcessorConfigPanel extends javax.swing.JPanel
{

    private final PropertyChangeSupport pcs;
    
    /**
     * Creates new form UFEDDataSourceProcessorConfigPanel
     */
    public UFEDDataSourceProcessorConfigPanel()
    {
        initComponents();
        pcs = new PropertyChangeSupport(this);
        
        chkParseFiles.setSelected(true);
        chkParseInstalledApplications.setSelected(true);
        chkParseContacts.setSelected(true);
        chkParseChats.setSelected(true);
    }


    /**
     * Clears the error label.
     */
    void clearErrorText()
    {
        errorLabel.setText(null);
    }
    
    /**
     * Sets the error label to show the supplied text.
     */
    void setErrorText(String text)
    {
        errorLabel.setText(text);
    }
    
    String getSelectedFilePath()
    {
        return filePathTextField.getText();
    }
    
    /**
     * Clears the selected file path.
     */
    void clearSelectedFilePath()
    {
        filePathTextField.setText(null);
    }
    
    
    
    public UFEDDataSourceProcessorSettings getSettings()
    {
        return new UFEDDataSourceProcessorSettings(getSelectedFilePath(),
                                                   chkParseFiles.isSelected(), chkParseInstalledApplications.isSelected(),
                                                   chkParseContacts.isSelected(), chkParseChats.isSelected());
    }
    

    /**
     * Adds a property change listener to this config panel.
     */
    @Override
    public synchronized void addPropertyChangeListener(PropertyChangeListener pcl) {
        super.addPropertyChangeListener(pcl);
        pcs.addPropertyChangeListener(pcl);
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        errorLabel = new javax.swing.JLabel();
        filePathTextField = new javax.swing.JTextField();
        fileBrowserButton = new javax.swing.JToggleButton();
        ufedSelectFolderLabel = new javax.swing.JLabel();
        chkParseFiles = new javax.swing.JCheckBox();
        chkParseInstalledApplications = new javax.swing.JCheckBox();
        chkParseContacts = new javax.swing.JCheckBox();
        chkParseChats = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(errorLabel, org.openide.util.NbBundle.getMessage(UFEDDataSourceProcessorConfigPanel.class, "UFEDDataSourceProcessorConfigPanel.errorLabel.text")); // NOI18N

        filePathTextField.setText(org.openide.util.NbBundle.getMessage(UFEDDataSourceProcessorConfigPanel.class, "UFEDDataSourceProcessorConfigPanel.filePathTextField.text")); // NOI18N
        filePathTextField.setToolTipText(org.openide.util.NbBundle.getMessage(UFEDDataSourceProcessorConfigPanel.class, "UFEDDataSourceProcessorConfigPanel.filePathTextField.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(fileBrowserButton, org.openide.util.NbBundle.getMessage(UFEDDataSourceProcessorConfigPanel.class, "UFEDDataSourceProcessorConfigPanel.fileBrowserButton.text")); // NOI18N
        fileBrowserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileBrowserButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(ufedSelectFolderLabel, org.openide.util.NbBundle.getMessage(UFEDDataSourceProcessorConfigPanel.class, "UFEDDataSourceProcessorConfigPanel.ufedSelectFolderLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(chkParseFiles, org.openide.util.NbBundle.getMessage(UFEDDataSourceProcessorConfigPanel.class, "UFEDDataSourceProcessorConfigPanel.chkParseFiles.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(chkParseInstalledApplications, org.openide.util.NbBundle.getMessage(UFEDDataSourceProcessorConfigPanel.class, "UFEDDataSourceProcessorConfigPanel.chkParseInstalledApplications.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(chkParseContacts, org.openide.util.NbBundle.getMessage(UFEDDataSourceProcessorConfigPanel.class, "UFEDDataSourceProcessorConfigPanel.chkParseContacts.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(chkParseChats, org.openide.util.NbBundle.getMessage(UFEDDataSourceProcessorConfigPanel.class, "UFEDDataSourceProcessorConfigPanel.chkParseChats.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chkParseChats)
                    .addComponent(chkParseFiles)
                    .addComponent(chkParseInstalledApplications)
                    .addComponent(chkParseContacts)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ufedSelectFolderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fileBrowserButton))
                    .addComponent(filePathTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
                    .addComponent(errorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(71, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ufedSelectFolderLabel)
                    .addComponent(fileBrowserButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(chkParseFiles)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkParseInstalledApplications)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkParseContacts)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkParseChats)
                .addGap(20, 20, 20))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void fileBrowserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileBrowserButtonActionPerformed
        // TODO add your handling code here:
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
//        fileChooser.setFileFilter(FileFilter);
//        Optional<Path> lastUsedPath = getLastUsedPath();
//        if(lastUsedPath.isPresent()) {
//            fileChooser.setCurrentDirectory(lastUsedPath.get().toFile());
//        }
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File selection = fileChooser.getSelectedFile();
//            setLastUsedPath(selection.toPath());
            filePathTextField.setText(selection.getAbsolutePath());
            
            //This will notify the wizard to revalidate the data source processor.
            pcs.firePropertyChange(DataSourceProcessor.DSP_PANEL_EVENT.UPDATE_UI.toString(), false, true);
        }
    }//GEN-LAST:event_fileBrowserButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkParseChats;
    private javax.swing.JCheckBox chkParseContacts;
    private javax.swing.JCheckBox chkParseFiles;
    private javax.swing.JCheckBox chkParseInstalledApplications;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JToggleButton fileBrowserButton;
    private javax.swing.JTextField filePathTextField;
    private javax.swing.JLabel ufedSelectFolderLabel;
    // End of variables declaration//GEN-END:variables
}
